@typeparam TValue

<style>
    .labeled-input-container-date {
        position: relative;
        width: 100%;
        margin-top: 12px;
        height: 100%;
        min-height: 78px;
    }

    .custom-input-date::-webkit-calendar-picker-indicator {
        filter: invert(90%) sepia(10%) saturate(500%) hue-rotate(330deg) brightness(105%) contrast(95%);
    }

    .input-label-date {
        position: absolute;
        top: -18px;
        left: 12px;
        background: @Background;
        padding: 0 4px;
        color: antiquewhite;
        font-size: 24px;
        font-family: Roboto;
        z-index: 2;
        pointer-events: none;
    }

    .input-field-date {
        width: 100%;
        height: 100%;
        min-height: 78px;
        padding: 0 12px;
        background: transparent;
        border: 1px solid var(--Gold, #FBD61C);
        border-radius: 4px;
        color: antiquewhite;
        font-family: Roboto;
        font-size: 25px;
    }

        .input-field-date:focus {
            outline: none;
            box-shadow: 0 0 0 2px #FBD61C;
        }
</style>

<div class="labeled-input-container-date">
    <label class="input-label-date">@Label</label>
    @if (IsDateOnly)
    {
        <InputDate @bind-Value="CurrentDateTimeValue"
                   class="input-field-date"
                   @attributes="AdditionalAttributes"
                   @oninput="HandleInput" />
    }
    else
    {
        <InputDate @bind-Value="CurrentDateTimeValue"
                   class="input-field-date"
                   @attributes="AdditionalAttributes"
                   @oninput="HandleInput" />
    }
</div>

@code {
    [Parameter] public string Label { get; set; } = "Дата рождения";
    [Parameter] public TValue? Value { get; set; }
    [Parameter] public EventCallback<TValue?> ValueChanged { get; set; }
    [Parameter] public string Background { get; set; } = "#34343C";

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> AdditionalAttributes { get; set; } = new();

    private bool IsDateOnly => typeof(TValue) == typeof(DateOnly) ||
                             (Nullable.GetUnderlyingType(typeof(TValue)) == typeof(DateOnly));

    private DateTime? _currentDateTimeValue;
    private DateTime? CurrentDateTimeValue
    {
        get => _currentDateTimeValue ?? ConvertToDateTime(Value);
        set
        {
            if (_currentDateTimeValue == value) return;

            _currentDateTimeValue = value;
            UpdateValue(value);
        }
    }

    private DateTime? ConvertToDateTime(TValue? value)
    {
        return value switch
        {
            DateOnly date => date.ToDateTime(TimeOnly.MinValue),
            DateTime dt => dt,
            _ => null
        };
    }

    private void HandleInput(ChangeEventArgs e)
    {
        if (string.IsNullOrEmpty(e.Value?.ToString()))
        {
            _currentDateTimeValue = null;
            return;
        }
    }

    private void UpdateValue(DateTime? value)
    {
        if (value.HasValue)
        {
            var newValue = (TValue)(IsDateOnly
                ? (object)DateOnly.FromDateTime(value.Value)
                : value.Value);

            ValueChanged.InvokeAsync(newValue);
        }
        else if (Nullable.GetUnderlyingType(typeof(TValue)) != null)
        {
            ValueChanged.InvokeAsync(default);
        }
    }

    protected override void OnParametersSet()
    {
        _currentDateTimeValue = null;
    }
}