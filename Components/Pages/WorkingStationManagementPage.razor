@page "/WorkingStationsManagement"
@rendermode InteractiveServer
@inject BootcampContext context
@inject NavigationManager nav
@inject UserService userService

<head>
    <link href="styles.css" rel="stylesheet" />
</head>

<style>
    rect:hover {
    cursor: pointer;
    }
</style>

<PageContainer>
    <div style="display: flex; flex-direction: column; justify-content: center; align-items:center; height: 100vh; width: 100vw">
        <h3 style="color: antiquewhite">Управление рабочими станциями</h3>
        <div style="display: flex;width: 75%; align-content: center; justify-content: center;">
            <InteractiveMap SelectWorkStation="SelectArea"></InteractiveMap>
        </div>
        <div style="width:33%; height: 10%; margin-top: 35px;">
            <MyBorders>
                <MyButton ButtonText="Назад" OnClick="Back"></MyButton>
            </MyBorders>
        </div>
    </div>



</PageContainer>

@if (isWorkStationExisting == false && !isCreatingWorkStation)
{
    <ModalWindow Title="Внимание!">
        <p style="color: antiquewhite; align-self: center; font-size: 24px">Рабочая станция не найдена.</p>

        <div style="display: flex; flex-direction: row; justify-items: center; align-items: center; gap: 20px; width: 100%">
            <MyBorders>
                <MyButton ButtonText="Добавить рабочую станцию" OnClick="CreateWorkStation" AdditionalStyles="align-self: center; "></MyButton>
            </MyBorders>
            <MyBorders Padding="30">
                <MyButton ButtonText="Закрыть" OnClick="ClearSelected" AdditionalStyles="align-self: center; "></MyButton>
            </MyBorders>
        </div>
    </ModalWindow>
}
else if(isCreatingWorkStation && !succesfullyCreated) {
    <ModalWindow Title="Создание рабочей станции">

        <div style="display: flex; flex-direction: column; gap: 20px; width: 100%; padding: 12px">
            <div style="display: flex; flex-direction: column; gap: 20px; align-items: center;">

                @if(!string.IsNullOrEmpty(errorMessage)) {
                    <div style="color: #ff6b6b;
                             background: rgba(255, 107, 107, 0.1);
                             padding: 10px 15px; border-radius: 4px; width: 100%;
                             text-align: center; font-size: 0.9rem;">
                        @errorMessage
                    </div>
                }

                <MyTextField Background="#151818" LabelText="Цена" @bind-Value="cost"></MyTextField>
                <div style="display: flex; flex-direction: row; gap: 20px">
                    <LabledInputCheckbox Label="PS5" @bind-Value="isPS5"></LabledInputCheckbox>
                </div>
                <MyTextField Background="#151818" LabelText="Описание" style="height: 100px;" isTextArea="true" @bind-Value="description"></MyTextField>
            </div>

            <div style="display: flex; flex-direction: row; justify-items: center; align-items: center; gap: 20px; width: 100%">
                <MyBorders>
                    <MyButton ButtonText="Отмена" OnClick="ClearSelected"></MyButton>
                </MyBorders>
                <MyBorders>
                    <MyButton ButtonText="Сохранить" OnClick="SaveChanges"></MyButton>
                </MyBorders>
            </div>
        </div>
    </ModalWindow>
} else if(succesfullyCreated) {
    <ModalWindow Title="Рабочая станция успешно добавлена">
        <div style="display: flex; flex: 1; height: 10vh; flex-direction: column; justify-items: end; align-items: center;"></div>   
        <MyBorders>
            <MyButton ButtonText="Ок" OnClick="ClearSelected"></MyButton>
        </MyBorders>
    </ModalWindow>
}

@if(isWorkStationExisting == true && isUpdating != true) {
    <ModalWindow Title="Выберите действие">

        <div style="display: flex; flex-direction: column; justify-items: center; align-items: center; gap: 20px;">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div style="color: #ff6b6b;
                             background: rgba(255, 107, 107, 0.1);
                             padding: 10px 15px; border-radius: 4px; width: 100%;
                             text-align: center; font-size: 0.9rem;">
                    @errorMessage
                </div>
            }
            <h5 style="color: antiquewhite">Статус: @selectedWorkStation?.IdStatusNavigation?.Name</h5>
            <MyBorders>
                <MyButton ButtonText="Создать бронь на эту станцию" OnClick="CreateReservation" AdditionalStyles="align-self: center; "></MyButton>
            </MyBorders>
            <MyBorders>
                <MyButton ButtonText="@(selectedWorkStation?.IsBlocked == true ? "Разблокировать рабочую станцию" : "Заблокировать рабочую станцию")"
                OnClick="SwitchBlockStation"
                AdditionalStyles="align-self: center;" />
            </MyBorders>
            <MyBorders>
                <MyButton ButtonText="Изменить рабочую станцию" OnClick="UpdateWorkStation" AdditionalStyles="align-self: center; "></MyButton>
            </MyBorders>
            <MyBorders>
                <MyButton ButtonText="Закрыть" OnClick="ClearSelected" AdditionalStyles="align-self: center; "></MyButton>
            </MyBorders>
        </div>
    </ModalWindow>
} 
@if(isUpdating == true && !succesfullyUpdated) {
    <ModalWindow Title="Изменение рабочей станции">

        <div style="display: flex; flex-direction: column; gap: 20px;">
            <div style="display: flex; flex-direction: column; gap: 20px; align-items: center;">

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div style="color: #ff6b6b;
                            background: rgba(255, 107, 107, 0.1);
                            padding: 10px 15px; border-radius: 4px; width: 100%;
                            text-align: center; font-size: 0.9rem;">
                        @errorMessage
                    </div>
                }

                <MyTextField Background="#151818" LabelText="Цена" @bind-Value="cost"></MyTextField>
                <div style="display: flex; flex-direction: row; gap: 20px">
                    <LabledInputCheckbox Label="PS5" @bind-Value="isPS5"></LabledInputCheckbox>
                </div>
                <MyTextField Background="#151818" LabelText="Описание" style="height: 100px;" isTextArea="true" @bind-Value="description"></MyTextField>
            </div>

            <div style="display: flex; flex-direction: row; justify-items: center; align-items: center; gap: 20px;">
                <MyBorders>
                    <MyButton ButtonText="Отмена" OnClick="ClearSelected"></MyButton>
                </MyBorders>
                <MyBorders>
                    <MyButton ButtonText="Сохранить" OnClick="SaveChanges"></MyButton>
                </MyBorders>
            </div>
        </div>
    </ModalWindow>
} 
@if(isUpdating == true && succesfullyUpdated) {
    <ModalWindow Title="Рабочая станция успешно изменена">
        <MyBorders>
            <MyButton ButtonText="Ок" OnClick="ClearSelected"></MyButton>
        </MyBorders>
    </ModalWindow>
}
@if(isWorkStationExisting == true && isCreatingReservation) {
    <ModalWindow Title="Создание брони">

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div style="color: #ff6b6b;
                             background: rgba(255, 107, 107, 0.1);
                             padding: 10px 15px; border-radius: 4px; width: 100%;
                             text-align: center; font-size: 0.9rem;">
                @errorMessage
            </div>
        }
        <div style="display: flex; flex-direction: column; gap: 20px; align-items: center; justify-items: center; width: 100%; padding: 12px">
            <MyTextField LabelText="Пользователь" @bind-Value="userPhone" IsPhoneNumber="true" Background="#151818"></MyTextField>

            @if (!instantReservation)
            {
                <LabledInputDate TValue="DateTime" Label="Дата начала брони" @bind-Value="reservationStartDate" Background="#151818"></LabledInputDate>
                <MyTimePicker TValue="TimeOnly" @bind-Value="reservationStartTime" Label="Время начала брони" Background="#151818"></MyTimePicker>
            }

            <MyTextField LabelText="Количество часов" Background="#151818" @bind-Value="hoursCount"></MyTextField>

            <div style="display: flex; flex-direction: column; height: 100%;">
                <div style="flex: 1;"></div> 
                <LabledInputCheckbox Label="Моментальная бронь"
                @bind-Value="instantReservation">
                </LabledInputCheckbox>
            </div>

            <div style="display: flex; flex-direction: row; gap:20px; justify-items: center; align-items: end; flex: 1; width: 100%">
                <MyBorders>
                    <MyButton ButtonText="Отмена" OnClick="ClearSelected"></MyButton>
                </MyBorders>
                <MyBorders>
                    <MyButton ButtonText="Забронировать" OnClick="CheckReservationFields"></MyButton>
                </MyBorders>
            </div>
        </div>
    </ModalWindow>
}
@if (user != null && !succesfullyPaid) {
    <ModalWindow Title="Оплата">
        <div style="display: flex; align-items: center; justify-items: center; flex-direction: column; gap: 20px; width: 100%">
            <h5 style="color: antiquewhite">Итоговая сумма бронирования составляет @totalPay</h5>
            <div style="display: flex; flex-direction: row; gap: 20px; justify-items: center; align-items: end; flex: 1; width: 100%">
                <MyBorders>
                    <MyButton ButtonText="Провести оплату" OnClick="SaveReservation"></MyButton>
                </MyBorders>
                <MyBorders>
                    <MyButton ButtonText="Отмена" OnClick="ClearSelected"></MyButton>
                </MyBorders>
            </div>
        </div>
    </ModalWindow>
}
@if(succesfullyPaid) {
    <ModalWindow Title="Рабочая станция успешно забронирована">
        <MyBorders>
            <MyButton ButtonText="Ок" OnClick="ClearSelected"></MyButton>
        </MyBorders>
    </ModalWindow>
}

@code {
    private bool? isWorkStationExisting;
    private bool isCreatingWorkStation = false;
    private bool succesfullyCreated = false;
    private bool? isUpdating;
    private bool succesfullyUpdated = false;
    private bool isCreatingReservation = false;
    private bool succesfullyPaid = false;

    private WorkStation? selectedWorkStation;
    private string selectedWorkStationId = "";

    private string errorMessage = "";

    private bool isPS5 = false;
    private string cost;
    private string description;

    private string userPhone;
    private string hoursCount;
    private bool instantReservation = true;
    private DateTime reservationStartDate = DateTime.Now;
    private TimeOnly reservationStartTime = TimeOnly.FromDateTime(DateTime.Now);

    private User user = null;
    private Client client = null;
    private int hoursCountInt;
    private decimal? totalPay;

    protected override void OnInitialized()
    {
        if (!userService.IsAdmin) nav.NavigateTo("/");
    }

    private async void SelectArea(int workStationId)
    {
        selectedWorkStationId = workStationId.ToString();
        WorkStation workStation = await context.WorkStations.Where(x => x.Id == workStationId).Include(a => a.IdStatusNavigation).FirstOrDefaultAsync();
        if(workStation == null) {
            isWorkStationExisting = false;
            selectedWorkStation = new WorkStation() { Id = workStationId };
            StateHasChanged();
        }
        else {
            cost = workStation.Cost.ToString();
            isPS5 = workStation.WorkStationType == 2;
            description = workStation.Description;

            isWorkStationExisting = true;
            selectedWorkStation = workStation;
            StateHasChanged();
        }
    }

    private void ClearSelected() {
        selectedWorkStation = null;
        isWorkStationExisting = null;
        isCreatingWorkStation = false;
        succesfullyCreated = false;
        isUpdating = null;
        succesfullyUpdated = false;
        description = "";
        isPS5 = false;
        errorMessage = "";
        isCreatingReservation = false;
        userPhone = "";
        instantReservation = true;
        reservationStartTime = TimeOnly.FromDateTime(DateTime.Now);
        reservationStartDate = DateTime.Now;
        user = null;
        client = null;
        succesfullyPaid = false;
    }

    private void Back() {
        nav.NavigateTo("/admin");
    }

    #region CreatingNewWorkStation

    private void CreateWorkStation() {
        errorMessage = "";
        isCreatingWorkStation = true;
    }

    private async void SaveChanges() {
        errorMessage = "";
        var isCostConvertable = decimal.TryParse(cost, NumberStyles.Any, CultureInfo.CurrentCulture, out decimal convertedCost);
        if(string.IsNullOrEmpty(cost)) {
            errorMessage = "Не заполнено поле цены";
            return;
        }
        else if(!isCostConvertable) {
            errorMessage = "Некорректно заполнена цена";
            return;
        }

        selectedWorkStation.WorkStationType = isPS5 ? 2 : 1;
        selectedWorkStation.Cost = convertedCost;
        selectedWorkStation.Description = description;
        selectedWorkStation.IdStatus = isWorkStationExisting == true ? selectedWorkStation.IdStatus : 2;
        selectedWorkStation.IsBlocked = false;

        try {
            if(isWorkStationExisting == true) {
                context.WorkStations.Update(selectedWorkStation);
                await context.SaveChangesAsync();
                succesfullyUpdated = true;
                StateHasChanged();
            }
            else {
                await context.WorkStations.AddAsync(selectedWorkStation);
                await context.SaveChangesAsync();
                succesfullyCreated = true;
                StateHasChanged();
            }

            errorMessage = "";
        }
        catch (Exception e) {
            errorMessage = e.Message;
            StateHasChanged();
        }
    }

    #endregion

    #region WorkStationActions

    private void UpdateWorkStation() {
        errorMessage = "";
        isUpdating = true;
    }


    private async void SwitchBlockStation() {
        errorMessage = "";
        try {
            selectedWorkStation.IsBlocked = !selectedWorkStation.IsBlocked;
            context.WorkStations.Update(selectedWorkStation);
            await context.SaveChangesAsync();
            StateHasChanged();
        }
        catch (Exception ex) {
            errorMessage = ex.Message;
            selectedWorkStation.IsBlocked = !selectedWorkStation.IsBlocked;
            StateHasChanged();
        }
    }

    private async void CreateReservation() {
        errorMessage = "";
        var status = await context.WorkStationStatuses.Where(x => x.Id == selectedWorkStation.IdStatus).FirstOrDefaultAsync();

        if(selectedWorkStation.IsBlocked == true) {
            errorMessage = "Рабочая станция заблокирована";
            StateHasChanged();
            return;
        }
        isCreatingReservation = true;
        StateHasChanged();
    }

    private async void CheckReservationFields() {
        errorMessage = "";

        if(string.IsNullOrEmpty(userPhone) || userPhone.Length != 11) {
            errorMessage = "Некорректный номер телефона";
            StateHasChanged();
            return;
        }
        if(!instantReservation && (reservationStartDate.Day < DateTime.Now.Day && reservationStartTime < TimeOnly.FromDateTime(DateTime.Now))) {
            errorMessage = "Некорректная дата/время";
            StateHasChanged();
            return;
        }
        if(!Int32.TryParse(hoursCount, out hoursCountInt)) {
            errorMessage = "Некорректно введено количество часов";
            StateHasChanged();
            return;
        }

        if (!await IsWorkStationAvailable(
            selectedWorkStation.Id, 
            new DateTime(reservationStartDate.Year, reservationStartDate.Month, reservationStartDate.Day, reservationStartTime.Hour, reservationStartTime.Minute, reservationStartTime.Second),
            hoursCountInt)){
            errorMessage = "В указаное время рабочая станция будет занята";
            StateHasChanged();
            return;
        }

        var user = await context.Users.Where(x => x.Phone == userPhone).FirstOrDefaultAsync();

        if(user == null) {
            errorMessage = "Аккаунта с данным номером телефона не существует";
            StateHasChanged();
            return;
        }

        var client = await context.Clients.Where(x => x.IdUser == user.Id).FirstOrDefaultAsync();
        this.user = user;
        this.client = client;
        totalPay = hoursCountInt * selectedWorkStation.Cost;
        StateHasChanged();
    }

    private async Task<bool> IsWorkStationAvailable(int workStationId, DateTime startTime, int hoursCount)
    {
        DateTime endTime = startTime.AddHours(hoursCount);

        bool isOccupied = await context.Sessions
            .Include(x => x.IdWorkStationNavigation)
            .Include(x => x.Reservations)
            .AnyAsync(s => (s.IdWorkStation == workStationId && s.Reservations.Any(x => x.ReservationStatus == ReservationStatus.Active) &&
                          s.StartTime.HasValue &&
                          s.HoursCount.HasValue &&
                          s.StartTime.Value <= endTime.AddMinutes(5) &&
                          s.StartTime.Value.AddHours(s.HoursCount.Value) >= startTime.AddMinutes(-5)));

        return !isOccupied;
    }

    private async void SaveReservation()
    {
        errorMessage = "";
        using var transaction = await context.Database.BeginTransactionAsync();
        try
        {
            Session session = new Session()
            {
                IdClient = client.Id,
                HoursCount = hoursCountInt,
                IdWorkStation = selectedWorkStation.Id,
                StartTime = instantReservation ? DateTime.Now : new DateTime(reservationStartDate.Year, reservationStartDate.Month, reservationStartDate.Day, reservationStartTime.Hour, reservationStartTime.Minute, reservationStartTime.Second),
            };

            context.Sessions.Add(session);
            await context.SaveChangesAsync();

            SessionPayment sessionPayment = new SessionPayment()
                {
                    TotalCost = hoursCountInt * selectedWorkStation.Cost,
                    BonusesSpent = null,
                    HoursFromMembership = 0,
                    IdSession = session.Id
                };

            context.SessionPayments.Add(sessionPayment);
            await context.SaveChangesAsync();

            Reservation reservation = new Reservation()
            {
                IdSession = session.Id,
                ReservationStatus = instantReservation ? 1 : 4,
            };

            selectedWorkStation.IdStatus = instantReservation ? WorkStationStatus.Busy : WorkStationStatus.Free;

            var loyalityLevel = await context.LoyalityLevels.Where(x => x.Id == client.LoyalityLevel).FirstOrDefaultAsync();
            client.Bonuses += session.HoursCount * (10 + loyalityLevel.BonusIncrease);

            var bonusMove = new BonusMove()
            {
                Amount = 10 + loyalityLevel.BonusIncrease.Value,
                ClientId = client.Id
            };

            context.BonusMoves.Add(bonusMove);
            userService.CheckLevel(client);
            
            context.Reservations.Add(reservation);
            await context.SaveChangesAsync();

            selectedWorkStation.IdStatus = 1;
            await context.SaveChangesAsync();

            succesfullyPaid = true;
            await transaction.CommitAsync();

            StateHasChanged();
        }
        catch (Exception ex) {
            errorMessage = ex.Message;
            StateHasChanged();
            await transaction.RollbackAsync();
        }
    }
    #endregion
}