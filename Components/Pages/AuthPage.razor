@page "/"
@using System.Text
@rendermode InteractiveServer
@inject BootcampContext _context
@inject NavigationManager nav
@inject UserService userService
@* Страница авторизации *@
<PageContainer>
    <div style="display: flex; flex-direction: column; align-items: center; gap: 30px; width: 600px; margin: 0 auto; padding-top: 50px;">
        <div style="display: flex; justify-content: center; width: 10vw; margin-bottom: 10px;">
            <Logo></Logo>
        </div>
        <h1 style="color: antiquewhite; text-align: center; width: 100%; margin: 0; font-size: 1.5rem; display: flex; align-content:center; justify-content: center;">
            @(creatingPassword ? "Придумайте пароль для аккаунта" : "Введите свой номер телефона чтобы авторизоваться")
        </h1>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div style="color: #ff6b6b; background: rgba(255, 107, 107, 0.1);
                     padding: 10px 15px; border-radius: 4px; width: 200%;
                     text-align: center; font-size: 0.9rem;">
                @errorMessage
            </div>
        }

        <div style="display: flex; flex-direction: column; gap: 30px; width: 100%; align-items: center;">
            @if (!creatingPassword)
            {
                <MyTextField LabelText="Номер телефона" 
                IsPhoneNumber="true"
                @bind-Value="phoneNumber"
                style="width: 100%;" />
            }

            @if (creatingPassword || showPasswordField)
            {
                <MyTextField LabelText="Пароль" @bind-Value="password" style="width: 100%" IsPassword="true"></MyTextField>
            }
            <div style="width: 100%; height: 78px">
                <MyBorders Width="600">
                    <MyButton ButtonText="Авторизоваться"
                    OnClick="async () => await Auth()"
                    Width="600" />
                </MyBorders>
            </div>

        </div>
    </div>
</PageContainer>

@code {
    private string phoneNumber = "";
    private string password = "";
    private bool creatingPassword = false;
    private bool showPasswordField = false;
    private string errorMessage = "";

    private async Task Auth() {
        errorMessage = "";
        if(phoneNumber.Length != 11) {
            errorMessage = "Введите корректный номер телефона";
            return;
        }

        var user = await _context.Users.Where(x => x.Phone == phoneNumber).FirstOrDefaultAsync();
        if(user == null) {
            await CreateAccount(phoneNumber);
        }
        else if(user.RequireData == true) {
            RequireData(user);
        }
        else if (showPasswordField || creatingPassword)
        {
            Login(user);
        }
        else if(string.IsNullOrEmpty(user.Password)){
            creatingPassword = true;
        }
        else {
            showPasswordField = true;
        }
    }

    private void RequireData(User user) {
        userService.CurrentUser = user;
        nav.NavigateTo("/AccountData");

    }

    private async Task CreateAccount(string number) {
        User newUser = new User() { Phone = number, RequireData = true };
        _context.Users.Add(newUser);
        await _context.SaveChangesAsync();
        userService.CurrentUser = newUser;
        nav.NavigateTo("/AccountData");
    }

    private async void Login(User user)
    {
        if (string.IsNullOrEmpty(user.Password))
        {
            await CreatePasswordLogin(user);
            return;
        }

        var hashedInput = HashPassword(password);
        if (user.Password == hashedInput)
        {
            errorMessage = "";

            if (user.Role == "Admin")
            {
                LoginAsAdmin(user);
                return;
            }

            userService.CurrentUser = user;
            userService.CurrentClient = await _context.Clients
                .Where(x => x.IdUser == user.Id)
                .Include(l => l.LoyalityLevelNavigation)
                .FirstOrDefaultAsync();

            nav.NavigateTo("/home");
        }
        else
        {
            errorMessage = "Введен неправильный пароль";
        }
    }

    private void LoginAsAdmin(User user) {
        userService.CurrentUser = user;
        userService.IsAdmin = true;
        nav.NavigateTo("/admin");
    }

    private async Task CreatePasswordLogin(User user) {
        if(password.Length < 6) {
            errorMessage = "Пароль слишком короткий. Минимум 6 символов!";
            return;
        }
        user.Password = HashPassword(password);
        await _context.SaveChangesAsync();
    }

    private string HashPassword(string password)
    {
        using var sha256 = System.Security.Cryptography.SHA256.Create();
        var bytes = Encoding.UTF8.GetBytes(password);
        var hashBytes = sha256.ComputeHash(bytes);
        return Convert.ToBase64String(hashBytes);
    }
}
