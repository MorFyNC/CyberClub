@page "/personalCabinet"
@inject HttpClient Http

@inject UserService userService
@inject NavigationManager nav
@inject BootcampContext context
@rendermode InteractiveServer
@if(userService.CurrentUser != null) {
    <PageContainer>
        <div style="display: flex; flex-direction: column; justify-content: center; align-items: center; gap: 40px;">

            <header style="display: flex; flex-direction: row; height: 65px; min-height: 65px; background: #151818; align-items: center; padding: 5px; width: 100%;">
                <div style="height: 100%; aspect-ratio: 220/348; display: flex; align-items: flex-start; justify-content: center; width: 220px">
                    <Logo Style="height: 100%; width: 100%; object-fit: contain; padding: 3px" EventCallback="Back"></Logo>
                </div>
                <h3 style="margin: 0 auto; color: #FBD61C; text-align: center; flex-grow: 1;">Bootcamp</h3>
                <div style="width: 220px">
                    <MyButton ButtonText="Выйти" OnClick="Quit"></MyButton>
                </div>
            </header>
            <div style="display: flex; flex-direction: column; justify-items: center; align-items: center; gap: 20px; width: 75%; height: 75vh; background: #151818; border-radius: 100px; padding: 15px">
                <h5 style="color: antiquewhite">Личный кабинет</h5>
                <div style="display: flex; flex-direction: row; width: 100%; height: 50%; padding: 15px;">
                    <div style="display: flex; flex-direction: column; justify-items: start; align-items: start; width: 50%">
                        <h5 style="color: antiquewhite">ФИО: @userService.CurrentUser.Fullname</h5>
                        <h5 style="color: antiquewhite">Номер телефона: @FormatPhoneNumber(userService.CurrentUser.Phone)</h5>
                        <h5 style="color: antiquewhite">Дата рождения @userService.CurrentUser.BirthDate</h5>
                    </div>
                    <div style="display: flex; flex-direction: column; justify-items: start; align-items: end; width: 50%">
                        <h5 style="color: antiquewhite">Бонусы: @userService.CurrentClient.Bonuses</h5>
                        <h5 style="color: antiquewhite">Баланс: @userService.CurrentClient.Balance</h5>
                        <div style="height: 25%; width: 45%">
                            <MyBorders>
                                <MyButton ButtonText="Пополнить" OnClick="() => isBalanceReplenishing = true"></MyButton>
                            </MyBorders>
                        </div>

                    </div>
                </div>
                <div style="display: flex; flex-direction: column; justify-items: Center; align-items: center; gap: 20px; height: 50%">
                    <h4 style="color: antiquewhite">Ваш уровень лояльности: @currentLevel.Name @(nextLevel is null ? "(Максимальный)" : "")</h4>
                    <div style="display: flex; flex-direction: column; justify-items: start; align-items: start; gap: 20px; height: 100%; width: 75%">
                        <h5 style="color: antiquewhite">Затраты: @spentString</h5>
                        <h5 style="color: antiquewhite">Увеличение полученных бонусов: @currentLevel.BonusIncrease</h5>
                        <MyBorders>
                            <MyButton ButtonText="История трат" OnClick="SpentHistory"></MyButton>
                        </MyBorders>
                    </div>
                </div>
            </div>
        </div>
    </PageContainer>

    @if(isBalanceReplenishing) {
        <ModalWindow Title="Пополнение баланса">
            <MyTextField LabelText="Сумма пополнения" @bind-Value="amountString" Background="#151818"></MyTextField>
            
            <div style="width:100%; display: flex; flex-direction: row; gap: 20px;">
                <MyBorders>
                    <MyButton OnClick="PayWithYooKassa" ButtonText="Пополнить"></MyButton>
                </MyBorders>
                <MyBorders>
                    <MyButton OnClick="Cancel" ButtonText="Отмена"></MyButton>
                </MyBorders>
            </div>
        </ModalWindow>
    }

    @if (transactionHistory)
    {
        <ModalWindow Title="История транзакций">
            <TransactionsHistory />
            <MyBorders>
                <MyButton ButtonText="Выйти" OnClick="Cancel"></MyButton>
            </MyBorders>
        </ModalWindow>
    }
}

@code {
    private string spentString = "";
    private string errorMessage = "";
    private bool isBalanceReplenishing = false;
    private bool transactionHistory = false;
    private bool succesfullyReplenished = false;

    private string amountString = "100";
    private decimal amount = 0;

    private LoyalityLevel currentLevel;
    private LoyalityLevel nextLevel;

    private void Back() {
        nav.NavigateTo("/home");
    }

    protected override async Task OnInitializedAsync()
    {
        if (userService.CurrentUser == null) nav.NavigateTo("/");
        await userService.UpdateValues();
        currentLevel = userService.CurrentClient.LoyalityLevelNavigation;
        var next = await context.LoyalityLevels.Where(x => x.Id == currentLevel.Id + 1).FirstOrDefaultAsync();
        nextLevel = next;
        spentString = await GetSpendsStringAsync();
    }


    private void Quit() {
        userService.Logout();
        nav.NavigateTo("/");
    }

    private void Cancel() {
        isBalanceReplenishing = false;
        errorMessage = "";
        amountString = "";
        amount = 0;
        transactionHistory = false;
    }

    private string FormatPhoneNumber(string digits)
    {
        if (string.IsNullOrEmpty(digits) || digits.Length < 1)
            return "";

        try
        {
            return digits.Length switch
            {
                1 => $"+7 ({digits}",
                <= 4 => $"+7 ({digits[1..]}",
                <= 7 => $"+7 ({digits.Substring(1, 3)}) {digits[4..]}",
                <= 9 => $"+7 ({digits.Substring(1, 3)}) {digits.Substring(4, 3)}-{digits[7..]}",
                _ => $"+7 ({digits.Substring(1, 3)}) {digits.Substring(4, 3)}-{digits.Substring(7, 2)}-{digits.Substring(9)}"
            };
        }
        catch
        {
            return $"+7{digits}";
        }
    }

    private void BalanceReplenish() {
        isBalanceReplenishing = true;
        StateHasChanged();
    }

    private void CheckFields() {
        errorMessage = "";
        if (!decimal.TryParse(amountString, NumberStyles.Any, CultureInfo.CurrentCulture, out amount)) {
            errorMessage = "Некорректная сумма";
            StateHasChanged();
            return;
        }

        var balanceReplenishment = new BalanceReplenishment() { 
            Amount = amount,
            IdClient = userService.CurrentClient.Id,
            ReplenishmentType = 2
        };

        userService.CurrentClient.Balance += amount;
        context.BalanceReplenishments.Add(balanceReplenishment);
        context.SaveChanges();

        isBalanceReplenishing = false;
        succesfullyReplenished = true;
        StateHasChanged();
    }
    private async Task PayWithYooKassa()
    {
        if (!decimal.TryParse(amountString, out var amount) || amount <= 0)
        {
            errorMessage = "Некорректная сумма";
            return;
        }

        try
        {
            var response = await Http.PostAsJsonAsync("https://localhost:7236/api/payments/create", amount);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<PaymentResponse>();
                if (result?.url is not null)
                {
                    nav.NavigateTo(result.url, forceLoad: true);
                }
            }
            else
            {
                errorMessage = "Ошибка при создании платежа";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Ошибка: " + ex.Message;
        }
    }

    private class PaymentResponse
    {
        public string url { get; set; }
    }

    private async Task<string> GetSpendsStringAsync()
    {
        try
        {
            using (var tempContext = new BootcampContext())
            {
                var clientId = userService.CurrentClient.Id;

                var sessionCashPayments = await tempContext.Sessions
                    .Where(s => s.IdClient == clientId && s.Reservations.FirstOrDefault().ReservationStatus != ReservationStatus.Cancelled)
                    .SelectMany(s => s.SessionPayments)
                    .Where(sp => sp.HoursFromMembership == null || sp.HoursFromMembership == 0)
                    .SumAsync(sp => sp.TotalCost ?? 0);

                var totalBonusesSpent = await tempContext.BonusMoves
                    .Where(b => b.ClientId == clientId && b.Amount < 0)
                    .SumAsync(b => (int?)b.Amount) ?? 0;

                var membershipPayments = await tempContext.MembershipBuys
                    .Where(mb => mb.IdClient == clientId)
                    .SumAsync(mb => mb.IdMembershipNavigation.Price ?? 0);

                var totalSpent = sessionCashPayments + membershipPayments - totalBonusesSpent;

                if (nextLevel is not null)
                {
                    return $"{totalSpent}/{nextLevel.RequiredSpend}";
                }
                return totalSpent.ToString();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in GetSpendsStringAsync: {ex.Message}");
            return "Ошибка загрузки";
        }
    }

    private void SpentHistory() {
        transactionHistory = true;
        StateHasChanged();
    }
}

