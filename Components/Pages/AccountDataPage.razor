@page "/AccountData"
@rendermode InteractiveServer
@inject BootcampContext _context
@inject UserService userService
@inject NavigationManager nav
@* Страница заполнения данных аккаунта *@
<PageContainer>
    <div style="display: flex; flex-direction: column; align-items: center; width: 100%; padding: 20px; box-sizing: border-box;">
        <div style="display: flex; flex-direction: column; align-items: center; width: 600px; max-width: 600px; gap: 24px;">
            <div style="width: 10vw">
                <Logo></Logo>
            </div>

            <h1 style="color: antiquewhite; text-align: center; width: 200%; margin: 0;
                    font-size: 1.5rem; line-height: 1.4; padding: 0 10px;">
                Вам необходимо заполнить некоторые данные чтобы продолжить
            </h1>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div style="color: #ff6b6b; background: rgba(255, 107, 107, 0.1);
                     padding: 10px 15px; border-radius: 4px; width: 200%;
                     text-align: center; font-size: 0.9rem;">
                    @errorMessage
                </div>
            }

            <div style="display: flex; flex-direction: column; gap: 20px; width: 100%; justify-items: center; align-items: center;">
                <MyTextField LabelText="ФИО" @bind-Value="fullname" />
                <MyTextField LabelText="Пароль" @bind-Value="password" style="width: 220px;" />
                <LabledInputDate @bind-Value="birthDate" style="width: 100%;" Label="Дата рождения" />
                <div style="height: 78px; width: 100%;">
                    <MyBorders>
                        <MyButton ButtonText="Сохранить данные"
                                  OnClick="async () => await SaveData()" />
                    </MyBorders>
                </div>
                
            </div>
        </div>
    </div>
</PageContainer>

@code {
    private string fullname = "";
    private string password = "";
    private DateOnly birthDate;
    private string errorMessage = "";

    protected override void OnInitialized()
    {
        if (userService.CurrentUser == null) nav.NavigateTo("/");
    }

    private async Task SaveData()
    {
        if (!ValidateFields(out var message))
        {
            errorMessage = message;
            return;
        }

        try
        {
            var user = userService.CurrentUser;
            user.Fullname = fullname;
            user.Password = password;
            user.BirthDate = birthDate;
            user.RequireData = false;
            user.Role = "User";

            _context.Users.Update(user);
            await _context.SaveChangesAsync();

            var savedUser = await _context.Users.Where(x => x.Phone == userService.CurrentUser.Phone)
                .FirstOrDefaultAsync();

            var newClient = new Client() { IdUser = savedUser.Id, Balance = 0, Bonuses = 0, LoyalityLevel = 1 };

            await _context.Clients.AddAsync(newClient);
            await _context.SaveChangesAsync();

            var savedClient = await _context.Clients.Where(x => x.IdUser == savedUser.Id)
                .Include(l => l.LoyalityLevelNavigation)
                .FirstOrDefaultAsync();

            userService.CurrentUser = savedUser;
            userService.CurrentClient = savedClient;

            errorMessage = "";

            nav.NavigateTo("/home");
        }
        catch (Exception ex)
        {
            errorMessage = "Произошла ошибка при сохранении данных: " + ex.Message;
        }
    }

    private bool ValidateFields(out string message)
    {
        if (string.IsNullOrWhiteSpace(fullname) || fullname.Split(' ', StringSplitOptions.RemoveEmptyEntries).Length < 3)
        {
            message = "Некорректно заполнено поле ФИО!";
            return false;
        }
        if (string.IsNullOrWhiteSpace(password) || password.Length < 6)
        {
            message = "Пароль слишком короткий! Минимум 6 символов";
            return false;
        }
        if (birthDate.Year < 1925 || birthDate.Year > 2011)
        {
            message = "Некорректно заполнена дата рождения!";
            return false;
        }
        message = "";
        return true;
    }
}