@page "/admin"
@inject NavigationManager nav
@inject UserService userService
@inject BootcampContext context
@inject ExcelReportService excelReportService
@rendermode InteractiveServer

<PageContainer>
    <div style="display: flex; flex-direction: column; justify-items: center; align-items: center; width: 100%; height: 100%; margin-top: 10px;">
        <h1 style="color: antiquewhite; text-align: center; width: 100%; margin-top: 20px; font-size: 1.5rem;">
            Панель администратора
        </h1>

        <div style="display: flex; justify-content: center; align-items: center; height: 75%; width: 600px; flex-direction: column; gap: 20px; margin-top: 30px">
            <MyBorders>
                <MyButton ButtonText="Добавить пользователя" OnClick="AddNewUser"></MyButton>
            </MyBorders>
            <MyBorders>
                <MyButton ButtonText="Управление рабочими станциями" OnClick="WorkingStations"></MyButton>
            </MyBorders>
            <MyBorders>
                <MyButton ButtonText="Пополнить баланс пользователя" OnClick="BalanceReplenish"></MyButton>
            </MyBorders>
            <MyBorders>
                <MyButton ButtonText="Финансовый отчет" OnClick="FinanceReport"></MyButton>
            </MyBorders>
            <MyBorders>
                <MyButton ButtonText="Выход" OnClick="Logout"></MyButton>
            </MyBorders>
        </div>
    </div>

</PageContainer>

@if(balanceReplenish && !succesfullyReplenished) {
    <ModalWindow ErrorMessage="@errorMessage" Title="Пополнение баланса пользователя">
        <MyTextField Background="#151818" IsPhoneNumber="true" LabelText="Номер телефона пользователя" ValueChanged="FindUser"></MyTextField>
        <label style="color: antiquewhite">@foundUser</label>
        <MyTextField Background="#151818" LabelText="Сумма пополнения" ValueChanged="ConvertValue"></MyTextField>

        <div style="display: flex; flex-direction: row; align-items: start; justify-items: end; gap: 20px; width: 100%">
            <MyBorders>
                <MyButton ButtonText="Отмена" OnClick="Cancel"></MyButton>
            </MyBorders>

            <MyBorders>
                <MyButton ButtonText="Пополнить" OnClick="SaveReplenishment"></MyButton>
            </MyBorders>
        </div>
    </ModalWindow>
}
else if (succesfullyReplenished) {
    <ModalWindow Title="@($"Баланс пользователя {found?.Fullname} пополнен на {amount} рублей")">
        <MyBorders>
            <MyButton ButtonText="Ок" OnClick="Cancel"></MyButton>
        </MyBorders>
    </ModalWindow>
}
@if(generatingReport) {
    <ModalWindow Title="Финансовый отчет">
        <LabledInputDate @bind-Value="reportStartDate" TValue="DateTime?" Background="#151818" Label="Начиная"></LabledInputDate>
        <LabledInputDate @bind-Value="reportEndDate" TValue ="DateTime?" Background="#151818" Label="Заканчивая"></LabledInputDate>

        <div style="display: flex; flex-direction: row; align-items: center; justify-items: center; gap: 20px; width: 100%">
            <div style="width: 50%;">
                <MyBorders Padding="12">
                    <MyButton ButtonText="Сгенерировать отчет" OnClick="async () => await GenerateReport()"></MyButton>
                </MyBorders>
            </div>
            <div style="width: 50%;">
                <MyBorders Padding="12">
                    <MyButton ButtonText="Отмена" OnClick="Cancel"></MyButton>
                </MyBorders>
            </div>
            
        </div>

    </ModalWindow>
}
@code {
    private bool balanceReplenish = false;

    private string phoneNumber = "";
    private string amount = "";
    private string foundUser = "";
    private bool canConvert;
    private decimal amountDecimal = 0;
    private bool userIsFound = false;
    private string errorMessage = "";
    private bool succesfullyReplenished = false;
    private User? found = null;

    private bool generatingReport = false;
    private DateTime? reportStartDate;
    private DateTime? reportEndDate;
    private bool isGenerating = false;

    private void AddNewUser() {
        nav.NavigateTo("/CreateAccountAdmin");
    }

    private void WorkingStations() {
        nav.NavigateTo("/WorkingStationsManagement");
    }

    protected override void OnInitialized()
    {
        if (!userService.IsAdmin) nav.NavigateTo("/");
    }

    private void Logout() {
        userService.Logout();
        nav.NavigateTo("/");
    }

    private void BalanceReplenish() {
        balanceReplenish = true;
    }

    private async void SaveReplenishment() {
        errorMessage = "";
        if (!userIsFound)
        {
            errorMessage = "Не удалось найти пользователя";
            StateHasChanged();
            return;
        }
        if(!canConvert) {
            errorMessage = "Некорректная сумма";
            StateHasChanged();
            return;
        }

        User? user = await context.Users
            .Where(x => x.Phone == phoneNumber)
            .Include(s => s.Clients)
            .FirstOrDefaultAsync();
        var client = user.Clients.FirstOrDefault();
        client.Balance += amountDecimal;
        BalanceReplenishment balanceReplenishment = new BalanceReplenishment() { Amount = amountDecimal, IdClient = client.Id, ReplenishmentType = ReplenishmentType.Cash };
        context.BalanceReplenishments.Add(balanceReplenishment);
        await context.SaveChangesAsync();
        succesfullyReplenished = true;
        StateHasChanged();
    }

    private void Cancel() {
        phoneNumber = "";
        amount = "";
        balanceReplenish = false;
        canConvert = false;
        amountDecimal = 0;
        userIsFound = false;
        foundUser = "";
        errorMessage = "";
        succesfullyReplenished = false;
        generatingReport = false;
        reportStartDate = null;
        reportEndDate = null;
        StateHasChanged();
    }

    private async void FindUser(string phone) {
        errorMessage = "";
        phoneNumber = phone;
        if(phoneNumber.Length != 11) {
            foundUser = "";
            return;
        }
        found = await context.Users.Where(u => u.Phone == phoneNumber).FirstOrDefaultAsync();
        if (found == null) foundUser = "Пользователь не найден";
        else
        {
            foundUser = $"Найденный пользователь: {found.Fullname}";
            userIsFound = true;
        }
        StateHasChanged();
    }

    private void ConvertValue(string value) {
        errorMessage = "";
        amount = value;
        if (decimal.TryParse(amount, NumberStyles.Any, CultureInfo.CurrentCulture, out amountDecimal))
        {
            canConvert = true;
        }
        else canConvert = false;
        StateHasChanged();
    }

    private void FinanceReport() {
        generatingReport = true;
        StateHasChanged();
    }

    private async Task GenerateReport()
    {
        if (isGenerating) return;

        isGenerating = true;
        try
        {
            var fileContent = await excelReportService.GenerateFinancialReport(reportStartDate, reportEndDate);
            var fileName = $"FinancialReport_{reportStartDate:yyyyMMdd}_{reportEndDate:yyyyMMdd}.xlsx";

            var base64Content = Convert.ToBase64String(fileContent);

            var url = $"data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{base64Content}";

            nav.NavigateTo(url, forceLoad: true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка генерации отчета: {ex.Message}");
        }
        finally
        {
            isGenerating = false;
        }
    }
}
